#! /bin/bash

parent="$PWD"

baseos="${parent}/baseos"
cfg=${parent}/mkiso.cfg
output="${parent}/output"
mkdir -p ${output}

uid=$(id -u)
if ! test "${uid}" = "0"
    then
        echo "***********************************************************"
        echo ""
        echo "Becuase you are not UID=0 (root), I will need to use 'sudo'"
        echo ""
        echo "***********************************************************"
        sudo ./mkiso -u $*

		. ${cfg}
		isofile="${binary}.iso"
		iso="${output}/${isofile}"
		liveiso="${output}/${isofile}"
		if test "${upload_ip}" -a "${upload_dir}" -a -f "${iso}"
			then
				cd ${output}
				tar cf - ${liveiso} ${isofile} | ssh ${upload_ip} "cd ${upload_dir} ; tar xf -"
			fi

        exit 0
    fi

if test "$1" = "-u"
	then
		with_sudo="Y"
		shift
	fi

isobase=${parent}/iso

rootdir="${parent}/ROOT"
rootfs=${isobase}/rootfs.txz 
configfs=${isobase}/config.tgz 
datafs=${isobase}/data.txz 

initrd=${isobase}/isolinux/initrd.img
md5chk=${isobase}/chk.md5

if ! test -d baseos/rootfs -a -d overlays
	then
		echo "Please run from the parent directory of 'baseos'"
		exit 0
	fi

cmd="$1"

if test "${cmd}" = "--help" -o "${cmd}" = "-h"
	then
		echo "Usage: $0 [ clean | initrd | rootfs ]"
		echo "clean  = remove rootfs.txz & initrd.img and exit"
		echo "initrd = re-make initrd.img"
		echo "rootfs = re-make rootfs.txz"
		echo "config = clean and re-run the configure utility"
		exit 0
	fi

if test "${cmd}" = "live"; then remade_rootfs="Y"; fi

if test "${cmd}" = "initrd"; then rm -f ${initrd}; fi

if test "${cmd}" = "rootfs"; then rm -f ${rootfs}; fi

if test "${cmd}" = "clean" -o "${cmd}" = "config"
	then
		cd ${parent}
		umount ${output}/install_os.dd_mnt >/dev/null 2>&1
		rm -f ${isobase}/isolinux/kernel
		rm -f ${isobase}/sfdisk.cfg
		rm -fr ${output}/*
		rm -rf ROOT CONFIG DATA
		rm -f ${rootfs} ${initrd} ${isobase}/install.cfg
		rm -f ${md5chk}
		rm -rf ${isobase}/random
		if test "${cmd}" = "config"
			then
				./configure
			fi
		exit 0
	fi

if ! test -f ${cfg}; then sh configure; fi


. ${cfg}

if ! test -d baseos/rootfs/common -a -d baseos/rootfs/${binary}
	then
		echo "ERROR: base O/S failure"
		ls -l baseos/rootfs/common -a -d baseos/rootfs/${binary}
		exit 0
	fi

for ovr in ${overlays}
	do
		if ! test -d overlays/${ovr}/rootfs -o overlays/${ovr}/config
			then
				echo "ERROR: Overlay '${ovr}' failure"
				ls -l overlays/${ovr}/rootfs overlays/${ovr}/config
				exit 0
			fi
	done


isofile="${binary}.iso"
iso="${output}/${isofile}"

rm -f ${iso}

if ! test -f ${initrd}
	then
		echo "Building 'initrd' for install O/S"

		umount ${output}/install_os.dd_mnt >/dev/null 2>&1
		rm -fr ${output}/install_os.dd ${output}/install_os.dd_mnt

		dd if=/dev/zero of=${output}/install_os.dd bs=1K count=8000 >/dev/null 2>&1
		mke2fs -q -N 400 -m 0 -F ${output}/install_os.dd
		mkdir ${output}/install_os.dd_mnt
		mount -o loop ${output}/install_os.dd ${output}/install_os.dd_mnt

		cd ${baseos}/rootfs
		tar -cf - -T ${parent}/build_files/common.lst | (cd ${output}/install_os.dd_mnt ; tar --strip 1 -xf -)

		cd ${parent}/install_os
		cp -a . ${output}/install_os.dd_mnt

		cd ${output}/install_os.dd_mnt
		mkdir dev tmp mnt proc cdrom sys

		chown -R 0:0 .
		find . -type f -exec chmod 644 {} ';'
		find . -type d -exec chmod 755 {} ';'

		for dir in lib64 etc/boot-up sbin usr/bin
		do
			find ${dir} -type f -exec chmod 555 {} ';'
		done
		chroot ${output}/install_os.dd_mnt ldconfig
		rm -f sbin/ldconfig

		cd ${parent}

		num=$(find ${output}/install_os.dd_mnt | wc -l)
		sz=$(du -s ${output}/install_os.dd_mnt | cut -f 1)
		sz=$[${sz}+(4*${num})]

		sync
		umount ${output}/install_os.dd_mnt
		sync
		rmdir ${output}/install_os.dd_mnt
		gzip -9 ${output}/install_os.dd

		cp -a ${output}/install_os.dd.gz ${initrd}

		rm -f ${output}/install_os.dd.gz
	fi



function fix_os_perms()
{
	cd ${rootdir}
	chown -R 0:0 .
	find . -type f -exec chmod 644 {} ';'
	find . -type d -exec chmod 755 {} ';'

	for dir in lib64 etc/rc.d sbin usr/sbin usr/bin usr/lib64/xtables usr/scripts etc/acpi
	do
		find ${dir} -type f -exec chmod 555 {} ';'
	done

	chmod +s sbin/su sbin/sudo
	chmod 400 boot/kernel

	cd ${parent}
	if test -d CONFIG
		then
			cd CONFIG
			chown -R 0:0 .
			find . -type f -exec chmod 644 {} ';'
			find . -type d -exec chmod 755 {} ';'
			chmod 600 system.cfg 2>/dev/null
		fi
}



function add_depends()
{
	ovr=$1
	file=$2

	if ! test -f ${parent}/overlays/${ovr}/${file}.cfg; then return; fi

	depends="";
	. ${parent}/overlays/${ovr}/${file}.cfg
	if test "${depends}"
		then
			overlays="${overlays} ${depends}"
			for x in ${depends}
				do
					add_depends $x common
					add_depends $x ${binary}
				done
		fi
}



function capture_overlays()
{
	for ovr in ${overlays}
		do
			add_depends ${ovr} common
			add_depends ${ovr} ${binary}
		done

	overlays=$(awk 'BEGIN { 
		ovr="'"${overlays}"'"
		n=split(ovr,a); out=""; 
		for(l=1;l<=n;l++) 
			if (done[a[l]]=="") 
				{ done[a[l]]="Y"; out=out _ " " _ a[l] }
		print substr(out,2)
		}')
}



function add_overlays()
{
	echo "Total overlays=${overlays}"

	rm -f ${isobase}/sfdisk.cfg
	for ovr in ${overlays}
		do
		file="${parent}/overlays/${ovr}/sfdisk.cfg"
		if test -f ${file}
			then
				cp ${file} ${isobase}
			fi

		d="${parent}/overlays/${ovr}/data/"
		if test -d "${d}"
			then
				echo "- Adding data: ${ovr}/data"
				mkdir -p ${parent}/DATA
				cd ${d}; cp -a . ${parent}/DATA
				chown 0:0 ${parent}/DATA
				chmod 755 ${parent}/DATA
			fi

		d="${parent}/overlays/${ovr}/config/"
		if test -d "${d}"
			then
				echo "- Adding config: ${ovr}/config"
				mkdir -p ${parent}/CONFIG
				cd ${d}; cp -a . ${parent}/CONFIG
			fi

		for dir in common ${binary}
			do
			d="${parent}/overlays/${ovr}/rootfs/${dir}"
			if test -d "${d}"
				then
					echo "- Adding overlay code: ${ovr}/${dir}"
					cd ${d}; cp -a . ${rootdir}
				fi
			done
		done
}

capture_overlays

if test "${kernel}"
	then
		if ! test -f "${parent}/kernel/${kernel}"
			then
				echo "ERROR: kernel '${kernel}' not found"
				ls -l ${parent}/kernel/${kernel}
				exit 0
			fi
		kernel="${parent}/kernel/${kernel}"
	else
		kernel="${parent}/kernel/kernel"
	fi

echo "KERNEL: ${kernel}"


if ! test -f ${rootfs}
	then
		echo "Building ROOT filesystem"

		rm -rf ${rootdir} ${parent}/CONFIG ${parent}/DATA
		rm -f ${rootfs} ${configfs} ${datafs}

		mkdir ${rootdir}
		cd ${baseos}/rootfs

		for dir in common ${binary}
			do
				echo "- Adding base O/S code: ${dir}"
				cd ${baseos}/rootfs/${dir}
				cp -a . ${rootdir}
			done

		if test "${overlays}"; then add_overlays; fi

		cp ${kernel} ${rootdir}/boot/kernel

		cd ${parent}
		du -sh ${rootdir}

		fix_os_perms
		for ovr in ${overlays}
		do
			cd ${parent}
			if test -f overlays/${ovr}/fix_perms; then . overlays/${ovr}/fix_perms; fi
		done

		cd ${rootdir}
		echo "- compressing ROOT file system"
		tar Jcf ${rootfs} .
		du -sh ${rootfs}

		if test -d ${parent}/CONFIG
			then
				cd ${parent}/CONFIG
				find -not -name . | tar --no-recursion -T - -cf - | gzip -9c > ${configfs}
			fi

		if test -d ${parent}/DATA
			then
				cd ${parent}/DATA
				tar Jcf ${datafs} .
			fi

		remade_rootfs="Y"
	fi




if ! test -d ${isobase}/random
	then
		mkdir ${isobase}/random
		for x in 0 1 2 3 4 5 6 7 8 9
		do
			dd if=/dev/urandom of=${isobase}/random/${x}.rnd bs=512 count=1 >/dev/null 2>&1
		done
	fi


if test "${sz}"
	then
		do_sz=$[${sz}+${sz}]
		{
		echo "default kernel initrd=initrd.img load_ramdisk=1 prompt_ramdisk=0 ramdisk_size=${do_sz} ro root=/dev/ram0"
		echo "prompt 0"
		echo "timeout 0"
		echo "display message.txt"
		} > ${isobase}/isolinux/isolinux.cfg
	fi


echo "Making ISO / USB image"

{
echo "baseos=\"${binary}\""
echo "overlays=\"${overlays}\""
} > ${isobase}/install.cfg

cp ${isobase}/install.cfg ${isobase}/version.txt

cp ${kernel} ${isobase}/isolinux/kernel

cd ${isobase}
md5sum $(find -type f -not -name chk.md5) > ${md5chk}


mkisofs -quiet -o ${iso} \
	-b isolinux/isolinux.bin \
	-c isolinux/boot.cat \
	-no-emul-boot -boot-load-size 4 \
	-boot-info-table \
	-V "SlimLinux" .

cd ${parent}
isohybrid ${iso}

chown --reference=LICENSE ${iso}

{
cat ${isobase}/install.cfg
echo "isofile=\"${isofile}\"" 
} > ${output}/iso.cfg

echo "-------------------------------------------------"
du -h ${output}/${isofile}
echo "-------------------------------------------------"

if test "${upload_ip}" -a "${upload_dir}" -a -z "${with_sudo}" -a -f ${iso}
	then
		cd ${output}
		tar cf - ${isofile} | ssh ${upload_ip} "cd ${upload_dir} ; tar xf -"
	fi




if test "${remade_rootfs}" = "Y"
	then
		cd ${parent}

		cp -a ${parent}/iso ${output}/live_iso
		isobase="${output}/live_iso"
		initrd=${isobase}/isolinux/initrd.img

		rm -f ${isobase}/config.tgz ${isobase}/rootfs.txz

		rootdir="${parent}/ROOT"
		isofile="live_${binary}.iso"
		iso="${output}/${isofile}"

		if ! test -d "${rootdir}"
			then
				make all
				if ! test -d "${rootdir}"
					then
						echo "ERROR: can't find or make a ROOT base directory"
						exit 0
					fi
			fi

		echo "---> Building the Live-O/S"

		sz=$(du -s ${rootdir} | cut -f 1)
		num=$(find ${rootdir} | wc -l)
		blk=1024

		do_sz=$[${sz}+(${num}*4)+(${sz}/10)]
		do_num=$[${num}+(${num}/8)]

		file="${output}/live.dd"
		mnt="${output}/live.mnt"

		umount ${mnt} 2>/dev/null
		rm -rf ${file} ${mnt} ${file}.gz

		dd if=/dev/zero bs=${blk} count=${do_sz} of=${file} >/dev/null 2>&1
		mke2fs -q -N ${do_num} -m 0 -F ${file}
		mkdir ${mnt}
		mount -o loop ${file} ${mnt}
		cd ${mnt}
		rmdir lost+found; mkdir lost+found

		cd ${rootdir}
		cp -a . ${mnt}

		rm -f ${mnt}/boot/kernel
		mkdir -p ${mnt}/etc/config

		if test -f "${configfs}"
			then
				cd ${mnt}/etc/config
				tar xf ${configfs}
			fi

		if test -f ${mnt}/etc/config/system.cfg
			then
				chown 0:0 ${mnt}/etc/config/system.cfg
				chmod 600 ${mnt}/etc/config/system.cfg
			fi

		dd if=/dev/urandom of=${mnt}/etc/config/seed.rnd bs=512 count=1 >/dev/null 2>&1

		cd ${parent}
		cp ${isobase}/install.cfg ${mnt}/etc/config

		cp -a /dev/null /dev/random /dev/urandom ${mnt}/dev
		mkdir ${mnt}/ram/etc ${mnt}/ram/ssh
		chmod 700 ${mnt}/ram/ssh
		echo "root:x:0:0::/root:/bin/false" > ${mnt}/ram/etc/passwd
		chroot ${mnt} ssh-keygen -A >/dev/null 2>&1

		cd ${mnt}/ram
		mv ssh ${mnt}/etc/config

		cd ${parent}
		rm -rf ${mnt}/ram/etc ${mnt}/dev/*

		cfgsz=$(du -s ${mnt}/etc/config | cut -f 1)
		cfgnum=$(find ${mnt}/etc/config | wc -l)

		cfgsz=$[${cfgsz}+(${cfgsz}/10)+(${cfgnum}*4)]


		if cmp -s ${mnt}/etc/fstab baseos/rootfs/common/etc/fstab 
			then
				{
				echo "CONFIG /opt/config tmpfs noexec,noatime,size=${cfgsz}K 0 0"
				echo "DATA /opt/data tmpfs noexec,noatime 0 0"
				} > ${mnt}/etc/fstab
			fi

		sync
		umount ${mnt}
		rmdir ${mnt}

		echo "---> Building the Live-ISO"

		sync
		gzip -9 ${file}

		cd ${parent}
		cp ${file}.gz ${initrd}
		rm ${file}.gz

		{
		echo "Slim-Linux ISO LiveCD"
		echo ""
		} > ${isobase}/isolinux/message.txt

		{
		echo "SlimLinux LiveCD"
		echo ""
		echo "Please boot this CD / USB-Stick in your target machine"
		} > ${isobase}/readme.txt


		do_sz=$[${sz}+(${sz}/5)]
		{
		echo "default kernel initrd=initrd.img load_ramdisk=1 prompt_ramdisk=0 ramdisk_size=${do_sz} ro root=/dev/ram0"
		echo "prompt 0"
		echo "timeout 0"
		echo "display message.txt"
		} > ${isobase}/isolinux/isolinux.cfg

		cd ${isobase}
		md5sum $(find -type f -not -name chk.md5) > chk.md5
		cd ${parent}

		mkisofs -quiet -o ${iso} \
			-b isolinux/isolinux.bin \
			-c isolinux/boot.cat \
			-no-emul-boot -boot-load-size 4 \
			-boot-info-table \
			-V "Live-SlimLinux" ${isobase}

		isohybrid ${iso}

		rm -rf ${isobase}

		du -h ${iso}

		if test "${upload_ip}" -a "${upload_dir}" -a -z "${with_sudo}" -a -f ${iso}
			then
				cd ${output}
				tar cf - ${isofile} | ssh ${upload_ip} "cd ${upload_dir} ; tar xf -"
			fi
	fi





if test -f "${iso}"
	then
		echo ""
		echo "============================ Options ==================================="
		echo ""
		echo "make dvd             ... burn ISO image to a CD/DVD disk"
		echo "make usb             ... copy the ISO installer to a USB stick"
		echo ""
		echo "make livedvd         ... make a bootable liveCD and burn to disk"
		echo "make liveusb         ... make a live USB stick (O/S is fixed)"
		echo "                         (config is fixed at create time)"
		echo "                         (user data is stored in RAM)"
		echo ""
		echo "make bootusb         ... install SlimLinux on a USB stick to boot & run"
		echo "                         (config can be modified)"
		echo "                         (user data is stored on USB)"
		echo ""
		echo "============================ Options ==================================="
		echo ""
	fi
