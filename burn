#! /bin/bash


if ! test -f output/iso.cfg
	then
		make all
		if ! test -f output/iso.cfg
			then
				echo "ERROR: Can't find the 'output/iso.cfg' file - try running 'make clean all'"
				exit 0
			fi
	fi

. output/iso.cfg
parent="${PWD}"
output="${parent}/output"
iso="${output}/${isofile}"
liveiso="${output}/live_${isofile}"

if ! test -f "${iso}"
	then
		make all
		. output/iso.cfg
		iso="${output}/${isofile}"

		if ! test -f "${iso}"
			then
				echo "ERROR: Can't find the ISO image - try running 'make clean all'"
				exit 0
			fi
	fi

opt="$1"; shift


if udisksctl help >/dev/null 2>&1
	then
		umount="udisksctl unmount -b"
		have_udisksctl="Y"
	else
		umount="umount"
	fi



function burn_dvd()
{
	image="$1"
	if ! test -f "${image}"
		then
			echo "ERROR: could not find ISO - ${image}"
			exit 0
		fi

	if test -f /proc/sys/dev/cdrom/info
		then
			cdrom="/dev/$(awk '/drive name:/ { print $NF }' /proc/sys/dev/cdrom/info)"
			can_write="$(awk '/^Can write (CD|DVD)-/ { tot += int($NF) } 
				END { if (tot>0) print "Y"; else print "N" }' /proc/sys/dev/cdrom/info)"
		fi

	if ! test "${cdrom}" -a -b "${cdrom}"
		then
			echo "ERROR: unable to find a CD/DVD drive in this machine"
			exit 0
		else
			if ! test "${can_write}" = "Y"
				then
					echo "ERROR: Your CD/DVD drive can't write disks"
					exit 0
				fi
		fi


	echo ""; echo -n "Insert a writeable disk you want to burn and press [Enter] :"; read x

	for cmd in xfburn cdrecord
	do
		if ${cmd} --help >/dev/null 2>&1
			then
				if test "${cmd}" = "xfburn"; then burn_run="${cmd} -i ${image}"; fi
				if test "${cmd}" = "cdrecord"; then burn_run="${cmd} -tao ${image}"; fi
				break;
			fi
	done


	if test -z "${burn_run}"
		then
			echo "ERROR: Could not find a supported burn command"
			exit 0
		fi

	${burn_run}
	exit 0
}



function umount_usb()
{
	while grep -q "^${dev}" /proc/mounts
		do
			devs="$(awk '/^\/dev\/'"${disk}"'[0-9]/ { printf "%s ",$1 }' /proc/mounts)"
			for file in ${devs}
				do
					echo "Found '${file}' mounted - running unmounting"
					${umount} ${file}
				done
			sleep 3
		done
	echo ""
	echo ""
	sleep 1
}



function choose_usb()
{
	echo "We *STRONGLY* recommend you switch off the option to automatically mount"
	echo "removeable media before using this option."
	echo ""
	echo ""; echo -n "Plug-in the USB stick you want to use and press [Enter] :"; read x
	echo ""
	echo "Select a USB drive:-"
	echo ""

	disk="";
	while ! test -f /sys/block/${disk}/size
	do
		usb=""; sep=""
		for disk in $(ls -l /sys/block/ | awk '/\/usb/ { if (index($9,"sd")==1) print $9 }')
		do 
			usb="${usb}${sep}${disk}"; sep=" ";
		done
		for d in ${usb}
		do
			name=$(cat /sys/block/${d}/device/model)
			size=$(awk '{ printf "%.1fGb",int($0)*512/1000000000 }' /sys/block/${d}/size)
			echo "-> ${d} - ${name} ${size}"
		done

		echo ""
		echo -n "Enter drive name, choose from '${usb}': "
		read disk
	done
	dev="/dev/${disk}"

	if grep -q "^${dev}" /proc/mounts
		then
			echo ""
			echo -n "!!! USB stick is in use, unmount it ? (y/n): "; read yn
			if test "${yn}" = "y"
				then
					umount_usb
					if grep -q "^${dev}" /proc/mounts
						then
						echo ""
						echo "ERROR: ${disk} failed to unmount"
						exit 0
						fi
				else
					echo ""
					echo "ERROR: can't use a USB stick that is mounted"
					exit 0
				fi
		fi
}




function burn_usb()
{
	image="$1"
	if ! test -f "${image}"
		then
			echo "ERROR: could not find ISO - ${image}"
			exit 0
		fi

	choose_usb

	uid=$(id -u)
	if ! test "${uid}" = "0"
	    then
			echo "========= need 'root' access to burn USB stick - calling 'sudo' ========="
			with_sudo="sudo"
		fi
	${with_sudo} dd if=${image} of=${dev} bs=1K
	${with_sudo} hdparm -f ${dev}
	${with_sudo} hdparm -z ${dev}

	if test "${have_udisksctl}" = "Y"
		then
			echo "Powering off '${disk}'"
			${with_sudo} udisksctl power-off -b ${dev}
		fi

	echo ""
	echo "=========================="
	echo "USB stick is ready to boot"
	echo "=========================="
	echo ""
}



function burn_bootusb()
{
	root="${parent}/iso/rootfs.txz"
	if ! test -f "${root}"
		then
			echo "ERROR: Can't find the '${root}' file - try running 'make clean all'"
			exit 0
		fi

	uid=$(id -u)
	if ! test "${uid}" = "0"
		then
			echo "***********************************************************"
			echo ""
			echo "Becuase you are not UID=0 (root), I will need to use 'sudo'"
			echo ""
			echo "***********************************************************"
			sudo ./burn ${opt} $*
			exit 0
		fi

	if ! sfdisk --help >/dev/null 2>&1
		then
			echo "ERROR: could not find 'sfdisk'"
			exit 0
		fi

	cd output
	rm -rf mnt
	if test -d mnt
		then
			echo "ERROR: could not clear old 'output/mnt' directory"
			exit 0
		fi
	cd ${parent}
	mnt="${parent}/output/mnt"

	choose_usb

	for x in 2 4 1; do ${umount} ${dev}${x}; done >/dev/null 2>&1

	echo "---> Formatting USB stick (${disk})"

	sz=$(cat /sys/block/${disk}/size)
	sz=$[${sz}/200000]

	if test -f ${parent}/iso/sfdisk.cfg
		then
			cat ${parent}/iso/sfdisk.cfg | sfdisk -q ${dev} >/dev/null 2>&1
	elif test "${sz}" -gt 180
		then
			{
			echo "label: gpt"
			echo ",512000,L,*"
			echo ",21000,L"
			echo ",16700000,S"
			echo ",,L"
			} | sfdisk -q ${dev} >/dev/null 2>&1
	elif test "${sz}" -gt 80
		then
			{
			echo "label: gpt"
			echo ",200000,L,*"
			echo ",11000,L"
			echo ",6500000,S"
			echo ",,L"
			} | sfdisk -q ${dev} >/dev/null 2>&1
		else
			{
			echo "label: gpt"
			echo ",140000,L,*"
			echo ",11000,L"
			echo ",3500000,S"
			echo ",,L"
			} | sfdisk -q ${dev} >/dev/null 2>&1
		fi

	p4_type="reiserfs"
	p4_cmd="mkfs.${p4_type}"

	{
	mkfs.ext2 -L SlimRootFS -m 0 -q ${dev}1
	mkswap -L SlimSwap ${dev}3
	mkfs.ext2 -L SlimConfig -m 0 -q ${dev}2
	echo y | ${p4_cmd} -l SlimData ${dev}4
	} > /dev/null 2>&1

	rootid=$(tune2fs -l ${dev}1 | awk '/^Filesystem UUID:/ { print $NF }')

	echo "---> Installing Operating System"

	mkdir ${mnt}
	mount ${dev}1 ${mnt}

	cd ${mnt}
	tar xf ${root}

	chroot ${mnt} ldconfig

	cd ${mnt}
	rmdir lost+found; mkdir lost+found

	cp ${parent}/iso/isolinux/kernel ${mnt}/boot/kernel

	mkdir ram/tmp
	cp -a ${dev} ${dev}[1234] dev
	mknod dev/sda1 b 8 1

	if sfdisk --help 2>&1 | grep -q part-uuid
		then
			root_partuuid="$(sfdisk --part-uuid ${dev} 1)"
		else
			root_partuuid="$(blkid ${dev}1 | awk '{
				x=substr($0,index($0,"PARTUUID=\"")+10);
				print toupper(substr(x,1,index(x,"\"")-1));
				}')"
		fi

	if test "${root_partuuid}"
		then
			more_append="root=PARTUUID=${root_partuuid}"
		else
			more_append="root=/dev/sda1"

			echo "***** WARNING: unable to get PARTUUID becuase your Linux-Utils are too old"
			echo " Using 'root=/dev/sda1' instead - this is only guaranteed to work if the"
			echo "   USB stick is the only disk in the machine when it is booted"
			blkid -v
			echo ""
		fi

	{
	echo "append = \" rootfstype=ext2 rootdelay=5 ${more_append}\""
	awk '{ if (($1!="append")&&($1!="root")) print }' etc/lilo.conf
	} > etc/lilo.new
	mv etc/lilo.new etc/lilo.conf

	{
	echo "boot = ${dev}"
	echo "disk = ${dev} bios=0x80"
	grep -v '^boot' etc/lilo.conf
	} > etc/stick.lilo

	chroot ${mnt} lilo -c -C etc/stick.lilo >/dev/null 2>&1

	rm -f dev/* ram/tmp/*
	rmdir ram/tmp

	cd ${parent}
	mkdir -p ${mnt}/opt/config
	mkdir -p ${mnt}/opt/data

	mount -ro remount ${dev}1

	echo "---> Installing Data & Config"

	mount ${dev}2 ${mnt}/opt/config
	cd ${mnt}/opt/config
	rm -rf lost+found
	mkdir lost+found
	dd if=/dev/urandom of=seed.rnd bs=512 count=1 >/dev/null 2>&1
	cp ${parent}/iso/install.cfg .

	file="${parent}/iso/config.tgz"
	if test -f ${file}
		then
			tar xf ${file}
		fi
	if ! test -f system.cfg
		then
			cat ${mnt}/etc/base_config/* > system.cfg
		fi
	chown -R 0:0 .
	chmod 600 system.cfg

	sync
	cd ${parent}
	mount -ro remount ${dev}2

	file="${parent}/iso/data.txz"
	if test -f ${file}
		then
			mount ${dev}4 ${mnt}/opt/data
			cd ${mnt}/opt/data
			tar xf ${file}
			sync
			cd ${parent}
			mount -ro remount ${dev}4
		fi

	sync
	hdparm -f ${dev} > /dev/null 2>&1

	echo "---> Flushing data to stick"
	sync


	cd ${parent}
	for x in 2 4 1; do ${umount} ${dev}${x}; done >/dev/null 2>&1
	rmdir ${mnt}

	hdparm -f ${dev} > /dev/null 2>&1

	echo ""
	echo "==================================================================="
	echo ""
	echo "If your system automatically mounts the partitions on the USB Stick"
	echo "you *must* unmount them before unpligging it"
	echo ""
	echo "==================================================================="

	echo -n "Checking ...."
	sleep 5
	echo ""
	umount_usb

	if test "${have_udisksctl}" = "Y"
		then
			echo "Powering off '${disk}'"
			udisksctl power-off -b ${dev}
		fi

	exit 0
}




if test -z "${opt}"
	then
		echo "ERROR: you must supply a command line option from - dvd usb bootusb livecd liveusb"
		exit 0
	fi

case ${opt} in
	dvd) burn_dvd "${iso}" ;;
	usb) burn_usb "${iso}" ;;
	livecd) burn_dvd "${liveiso}" ;;
	liveusb) burn_usb "${liveiso}" ;;
	bootusb) burn_bootusb;;
	*) echo "ERROR: unsupported option '${opt}'" ;;
esac
