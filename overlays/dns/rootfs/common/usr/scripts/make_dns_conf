#! /bin/sh
#
# (c) Copyright 2017-2018 James Stevens (james@jrcs.net) - All Rights Reserved
# see License.txt for details
#
# Also a lot lifted from RFC7534
# https://tools.ietf.org/html/rfc7534

. /usr/scripts/opts

conf="/etc/dns.conf"
tmp=/tmp/make_dns_conf_$$_$RANDOM
dst="${dnsbase}${conf}"

{
echo 'options {
   listen-on {
       127.0.0.1;         // localhost

     // The following address is node-dependent and should be set to
     // something appropriate for the new AS112 node.

'
awk '/^4 / { print $3 _ ";" }' /ram/addrs


if test "${dnsWithAS112}" = "Y"
then
echo '
     // The following addresses are used to support Direct Delegation
     // AS112 service and are the same for all AS112 nodes.

       192.175.48.1;      // prisoner.iana.org (anycast)
       192.175.48.6;      // blackhole-1.iana.org (anycast)
       192.175.48.42;     // blackhole-2.iana.org (anycast)

     // The following address is used to support DNAME redirection
     // AS112 service and is the same for all AS112 nodes.

       192.31.196.1;      // blackhole.as112.arpa (anycast)'
fi

echo '};

     listen-on-v6 {
       ::1;               // localhost
   '

if test "${dnsWithAS112}" = "Y"
then
echo '
     // The following addresses are used to support Direct Delegation
     // AS112 service and are the same for all AS112 nodes.

       2620:4f:8000::1;   // prisoner.iana.org (anycast)
       2620:4f:8000::6;   // blackhole-1.iana.org (anycast)
       2620:4f:8000::42;  // blackhole-2.iana.org (anycast)

     // The following address is used to support DNAME redirection
     // AS112 service and is the same for all AS112 nodes.

       2001:4:112::1;    // blackhole.as112.arpa (anycast)
'
fi


if test "${static6IP}"
	then
		awk '/^6 / { print $3 _ ";" }' /ram/addrs
	fi
echo '
     };

     directory "/var/dns";
     allow-update { none; };
     allow-transfer { none; };
     notify no;
     max-udp-size 4096;
     edns-udp-size 4096;
'

if test "${dnsDNSSEC}" = "Y"
	then
	     echo "dnssec-enable yes;"
	else
	     echo "dnssec-enable no;"
	fi

if test "${dnsResolver}" = "Y"
	then
	     echo "    recursion yes;"
	     if test "${resolverAllowed}"
	     	then
	     		echo -n "    allow-recursion { 127.0.0.0/8; ::1; "
	     		for svr in ${resolverAllowed}
	     		do	
	     			echo -n "${svr}; "
	     		done
	     		echo "};"
	     	fi
	else
	     echo "    recursion no;        // authoritative-only server"
	fi
     
echo ' };  '

if test "${dnsLogging}" = "Y"
	then
	echo "// dnsLogging = ${dnsLogging}"
echo '
   // Log queries, so that when people call us about unexpected
   // answers to queries they did not realise they had sent, we
   // have something to talk about.  Note that activating this
   // naively has the potential to create high CPU load and consume
   // enormous amounts of disk space.  This example retains 2 old
   // versions at a maximum of 500 MB each before rotating out the
   // oldest one.

logging {
     channel "querylog" {
       file "/var/log/query.log" versions 2 size 500m;
       print-time yes;
     };
     category queries { querylog; };
   };
'
fi



if test -f /opt/config/rndc.conf
	then
		cp /opt/config/rndc.conf /ram/rndc.conf
elif test "${dnsRndcKey}"
	then
		echo "key \"rndc-key\" { algorithm hmac-md5; secret \"${dnsRndcKey}\"; };"
		echo "controls {"
		echo "   inet 127.0.0.1 port 953 allow { 127.0.0.1; } keys { \"rndc-key\"; };"
		
		if test "${dnsRndcAllow}" -a ! "${dnsRndcAllow}" = "127.0.0.1"
			then
				rtmp="/tmp/make_dns_conf_$$_$RANDOM"
				/usr/scripts/by_addr_type 0 ${dnsRndcAllow} > ${rtmp}
				for ipv in 4 6
				do
					grep "^${ipv} " /ram/addrs | while read ipv sub addr mask
					do
						awk 'BEGIN { ipv=int("'"${ipv}"'");
							printf "\tinet '"${addr}"' port 953 allow { " 
							}
						{ if (int($3)==ipv) printf "%s; ",$NF }
						END { print "} keys { \"rndc-key\"; };"
						}' ${rtmp}
					done
				done
				
				rm -f ${rtmp}
			fi
		echo "};"

		{
		echo "key \"rndc-key\" { algorithm hmac-md5; secret \"${dnsRndcKey}\"; };"
		echo "options { default-key \"rndc-key\"; default-server 127.0.0.1; default-port 953; };"
		} > /ram/rndc.conf
fi



if test "${dnsWithAS112}" = "Y"
then
echo '
   // Direct Delegation AS112 Service

   // RFC 1918

zone "10.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "16.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "17.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "18.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "19.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "20.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "21.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "22.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "23.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "24.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "25.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "26.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "27.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "28.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "29.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "30.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "31.172.in-addr.arpa" { type master; file "db.dd-empty"; };
zone "168.192.in-addr.arpa" { type master; file "db.dd-empty"; };

   // RFC 6890

zone "254.169.in-addr.arpa" { type master; file "db.dd-empty"; };

   // DNAME redirection AS112 Service

zone "empty.as112.arpa" { type master; file "db.dr-empty"; };

   // Also answer authoritatively for the HOSTNAME.AS112.NET and
   // HOSTNAME.AS112.ARPA zones, which contain data of operational
   // relevance.

zone "hostname.as112.net" {
     type master;
     file "db.hostname.as112.net";
   };

zone "hostname.as112.arpa" {
     type master;
     file "db.hostname.as112.arpa";
   };
'
fi


if test "${dnsWithSlave}" = "Y"
	then
		mkdir -p ${dnsbase}/slave
		chown nobody: ${dnsbase}/slave

		awk '/^dnsSlave=/ {
			x=substr($0,index($0,"=")+1);
			gsub("\"","",x);
			n=split(x,a," ");

			file=a[1];
			gsub("/","_",file);
			gsub(":","_",file);

			printf "zone \"%s\" { type slave; file \"/slave/%s\";\n\tmasters {",a[1],file
			for(l=2;l<=n;l++) printf "%s; ",a[l]
			print "}; };\n"

			}' ${syscfg}
	fi


if test "${dnsWithMaster}" = "Y"
	then
		mkdir -p ${dnsbase}/master
		chown nobody: ${dnsbase}/master

		awk '/^dnsMaster=/ {
			x=substr($0,index($0,"=")+1);
			gsub("\"","",x);
			n=split(x,a," ");

			file=a[1];
			gsub("/","_",file);
			gsub(":","_",file);

			iplist=""; adlist="";
			for(l=2;l<=n;l++) {
				iplist = iplist _ a[l] _ "; "
				if (index(a[l],"/")==0) adlist = adlist _ a[l] _ "; "
				}

			printf "zone \"%s\" { type master; notify explicit; file \"/master/%s\";\n",a[1],file
			if (iplist!="") printf "\tallow-transfer { %s };\n",iplist
			if (adlist!="") printf "\talso-notify { %s };\n",adlist
			print "\t};\n"

			}' ${syscfg}
	fi



} > ${tmp}

mv ${tmp} ${dst}


if ! named-checkconf -t ${dnsbase} ${conf}
	then
		logger -s -t "named-checkconf" "ERROR: ${conf} failed validation checks"
	else
		killall -q -HUP named
	fi
